import{S as _o,i as go,s as Io,N as Mo,e as l,t as u,k as r,c as a,a as h,h as p,d as t,m as n,b as M,g as i,M as s,j as Lt,G as xo,H as Vo,I as Eo,r as Po,p as ko,D as St,x as Uo,y as Co,z as Bo,A as Go,B as co,C as Ro,T as wo,U as vo,f as wt,n as To}from"../../chunks/index-59d3e747.js";function Ho(v){let f,m,b,P,d,c,x,g,E,R,U,q,V,Q,F,B,z,W,T,H,A,X,G,y;const L=v[4].default,I=Mo(L,v,v[3],null);return{c(){f=l("div"),m=l("div"),b=l("p"),P=u(v[1]),d=r(),c=l("span"),x=u("|"),g=r(),E=l("a"),R=l("p"),U=u("Back to Posts"),q=r(),V=l("span"),Q=u("|"),F=r(),B=l("p"),z=u("Length: "),W=u(v[2]),T=r(),H=l("h1"),A=u(v[0]),X=r(),G=l("div"),I&&I.c(),this.h()},l(w){f=a(w,"DIV",{class:!0});var _=h(f);m=a(_,"DIV",{class:!0});var k=h(m);b=a(k,"P",{});var D=h(b);P=p(D,v[1]),D.forEach(t),d=n(k),c=a(k,"SPAN",{});var Y=h(c);x=p(Y,"|"),Y.forEach(t),g=n(k),E=a(k,"A",{href:!0,class:!0});var Z=h(E);R=a(Z,"P",{});var $=h(R);U=p($,"Back to Posts"),$.forEach(t),Z.forEach(t),q=n(k),V=a(k,"SPAN",{});var ee=h(V);Q=p(ee,"|"),ee.forEach(t),F=n(k),B=a(k,"P",{});var S=h(B);z=p(S,"Length: "),W=p(S,v[2]),S.forEach(t),k.forEach(t),T=n(_),H=a(_,"H1",{class:!0});var te=h(H);A=p(te,v[0]),te.forEach(t),X=n(_),G=a(_,"DIV",{class:!0});var oe=h(G);I&&I.l(oe),oe.forEach(t),_.forEach(t),this.h()},h(){M(E,"href","/blog"),M(E,"class","link"),M(m,"class","flex justify-evenly items-center"),M(H,"class","my-8 text-4xl font-bold text-center"),M(G,"class","post-data"),M(f,"class","max-w-4xl mx-auto mt-12 p-4")},m(w,_){i(w,f,_),s(f,m),s(m,b),s(b,P),s(m,d),s(m,c),s(c,x),s(m,g),s(m,E),s(E,R),s(R,U),s(m,q),s(m,V),s(V,Q),s(m,F),s(m,B),s(B,z),s(B,W),s(f,T),s(f,H),s(H,A),s(f,X),s(f,G),I&&I.m(G,null),y=!0},p(w,[_]){(!y||_&2)&&Lt(P,w[1]),(!y||_&4)&&Lt(W,w[2]),(!y||_&1)&&Lt(A,w[0]),I&&I.p&&(!y||_&8)&&xo(I,L,w,w[3],y?Eo(L,w[3],_,null):Vo(w[3]),null)},i(w){y||(Po(I,w),y=!0)},o(w){ko(I,w),y=!1},d(w){w&&t(f),I&&I.d(w)}}}function No(v,f,m){let{$$slots:b={},$$scope:P}=f,{title:d}=f,{date:c}=f,{length:x}=f;return v.$$set=g=>{"title"in g&&m(0,d=g.title),"date"in g&&m(1,c=g.date),"length"in g&&m(2,x=g.length),"$$scope"in g&&m(3,P=g.$$scope)},[d,c,x,P,b]}class Wo extends _o{constructor(f){super(),go(this,f,No,Ho,Io,{title:0,date:1,length:2})}}function Ao(v){let f,m,b,P,d,c,x,g,E,R,U,q,V,Q,F,B,z,W,T,H,A,X,G,y,L,I,w,_,k,D,Y,Z,$,ee,S,te,oe,vt,Pe,ke,Me,ie,bt,xe,Ve,Ee,se,_t,Ue,Ce,Be,le,gt,Ge,Re,Te,O,ve,ae,zt,He,re,It,Ne,We,Ae,ne,Pt,Le,Se,ze,fe,kt,Xe,De,Oe,N,be,Mt,xt,_e,Vt,Et,ge,Ut,je,Ke,qe,he,Ct,Qe,Fe,Je,ue,Bt,Ye,Ze,$e,j,Gt,J,Rt,Tt,et,tt,ot,K,Ie,pe,Xt,it,st,lt,me,Ht,at,rt,nt,de,Nt,ft,ht,ut,ye,Wt,pt,mt,dt,ce,At;return{c(){f=l("p"),m=u("In early 2021, I transitioned my personal computers to Arch Linux and while the experience has been excellent overall, there are a few shortcomings in the software compatibility department, mainly with a few games (League of Legends) and software I need to use for school (Multisim). While these can be \u201Crun\u201D using wine, I found that the experience left a lot to be desired, and for school especially, I wanted to make sure I was in an environment supported by my classes."),b=r(),P=l("br"),d=r(),c=l("p"),x=u("This led to the decision to use Windows for these as well as anything else not supported well by linux. At this point you might be asking why I\u2019m not just dual-booting for simplicity. The main reasons are that I\u2019ve gotten annoyed with a lot of the telemetry, excess, and clunkiness of running Windows natively on my desktop as well as for the sake of getting some experience with QEMU/KVM on Linux. Note that this won\u2019t be a full guide to the process, but more of a showcase on how I set it up for myself."),g=r(),E=l("br"),R=r(),U=l("p"),q=u("Feel free to use anything mentioned here for yourself and be sure to follow along with the files mentioned by viewing them yourself on my "),V=l("a"),Q=u("github"),F=u(". Without further rambling, let\u2019s get into the important parts."),B=r(),z=l("br"),W=r(),T=l("h2"),H=u("Hardware & Specifics"),A=r(),X=l("br"),G=r(),y=l("p"),L=l("strong"),I=u("CPU:"),w=u(" AMD Ryzen 7 3700x "),_=l("br"),k=r(),D=l("strong"),Y=u("RAM:"),Z=u(" 16GB DDR4 3600MHz "),$=l("br"),ee=r(),S=l("strong"),te=u("GPU:"),oe=u(" EVGA RTX 2080 XC Gaming "),vt=l("br"),Pe=r(),ke=l("br"),Me=r(),ie=l("p"),bt=u("While most hardware choices don\u2019t really matter for this kind of virtualization, eg. get as much memory as you can, have a processor with a lot of threads; one recommendation I can make is to not get an Nvidia GPU. Not only is this good advice for anyone looking to transition to a Linux desktop due to proprietary drivers and other headaches, but it plays a large part in the complexity of this setup as I painfully learned trying to figure out why the VM wouldn\u2019t start when I first set it up, more on this later."),xe=r(),Ve=l("br"),Ee=r(),se=l("p"),_t=u("Other than that, my experience was pretty standard. Setting up a VM through virt-manager and libvirt was the same process as any other type of VM. I installed Windows normally using the default video drivers provided by QEMU and virtio drivers for disks, network, etc, before doing anything GPU related to make sure any errors I had to solve later weren\u2019t related to the VM itself."),Ue=r(),Ce=l("br"),Be=r(),le=l("h2"),gt=u("GPU Passthrough"),Ge=r(),Re=l("br"),Te=r(),O=l("div"),ve=l("p"),ae=l("img"),He=r(),re=l("p"),It=u("Above is my edited vBios file that is passed through to the VM. Usually, when you load into a graphical session, the vBios gets changed as you use the GPU. Because of this, a new vBios is given to the VM to use. Next, to add the GPU alongside any other devices such as a USB controller, I had to get the relevant IOMMU groups. \\ Here\u2019s an example of what the GPU group looked like on my system:"),Ne=r(),We=l("br"),Ae=r(),ne=l("p"),Pt=u("These were added to the xml file containing all the information for the VM."),Le=r(),Se=l("br"),ze=r(),fe=l("p"),kt=u("Now that the normal setup is done, we can move on to specifics in a single GPU setup. The idea is for this process is generally as follows:"),Xe=r(),De=l("br"),Oe=r(),N=l("ol"),be=l("li"),Mt=u("Stop the host display server"),xt=r(),_e=l("li"),Vt=u("Unload all GPU drivers"),Et=r(),ge=l("li"),Ut=u("Load the vfio kernel modules in their place"),je=r(),Ke=l("br"),qe=r(),he=l("p"),Ct=u("This is accomplished with scripts that are triggered by the VM starting and stopping. Naturally, start.sh handles startup, with the IOMMU groups sourced from kvm.conf. Lucky for me, you only need to edit the vBios file on Nvidia GPUs. Most documention said this was only required for pascal series (eg. GTX 1070), however, I was unable to get the VM to properly boot without this step. Keep that in mind if you plan on having a similar setup."),Qe=r(),Fe=l("br"),Je=r(),ue=l("h2"),Bt=u("Optimization"),Ye=r(),Ze=l("br"),$e=r(),j=l("p"),Gt=u("Now that I had a working VM, the next goal was to reduce any latency and overhead from virtualising Windows. Since I planned to play some competitive games that don\u2019t run on linux, it was important to me to make it feel like I was playing on bare metal. The main things I used for this were CPU Pinning and HugePages "),J=l("a"),Rt=u("(Arch Wiki)"),Tt=u(". CPU pinning manually allocates certain threads to the VM so the host doesn\u2019t use them as well, introducing latency. This is configured on a per-CPU basis since every processor has it\u2019s own architechture. In my case, the Ryzen 7 3700x has the following layout:"),et=r(),tt=l("br"),ot=r(),K=l("div"),Ie=l("p"),pe=l("img"),it=r(),st=l("br"),lt=r(),me=l("p"),Ht=u("The important sections to look at are the grey boxes which represent a physical core, and the group of grey boxes itself which represents a CCX (Core Complex). I chose to only include cores from one of the two CCX present on the CPU. Since the VM will only be used for gaming and schoolwork, 8 threads should be more than enough performance. Using only one CCX will also improve latency since the cores won\u2019t have to wait on information from the other CCX. Lastly, I chose the second or bottom CCX since I want to leave Core #0 for the host. All of this can be seen in the xml file, specifically in the \u201Ccputune\u201D section."),at=r(),rt=l("br"),nt=r(),de=l("p"),Nt=u("The last major optimization I included was HugePages. Without going into too much detail, it is an alternate way of providing memory to the VM, which results in a massive difference in performance according to my testing. It is manually allocated using the scripts triggered at startup and deallocated upon closing the VM. I stronly recommend looking into HugePages if you decide to use a setup like this. There were a few other small optimizations that I applied and you might be able to find in the xml file, but they didn\u2019t provide enough of a difference to be meaningful in my opinion."),ft=r(),ht=l("br"),ut=r(),ye=l("h2"),Wt=u("Hyper-V"),pt=r(),mt=l("br"),dt=r(),ce=l("p"),At=u("Hyper-V is a virtualization platform on Windows, and it\u2019s normally used in this case to hide the nature of the host to the guest machine. In other words, you can use it to hide the fact that you are using a VM to circumvent some anti-cheats and other software restrictions. I chose not to use it in my setup due to the performance hit as well as not really needing it for anything I use Windows for. Note that games like Valorant have been updated to automatically flag Hyper-V users, but it can work for other titles with a similar anti-cheat."),this.h()},l(e){f=a(e,"P",{});var o=h(f);m=p(o,"In early 2021, I transitioned my personal computers to Arch Linux and while the experience has been excellent overall, there are a few shortcomings in the software compatibility department, mainly with a few games (League of Legends) and software I need to use for school (Multisim). While these can be \u201Crun\u201D using wine, I found that the experience left a lot to be desired, and for school especially, I wanted to make sure I was in an environment supported by my classes."),o.forEach(t),b=n(e),P=a(e,"BR",{}),d=n(e),c=a(e,"P",{});var Dt=h(c);x=p(Dt,"This led to the decision to use Windows for these as well as anything else not supported well by linux. At this point you might be asking why I\u2019m not just dual-booting for simplicity. The main reasons are that I\u2019ve gotten annoyed with a lot of the telemetry, excess, and clunkiness of running Windows natively on my desktop as well as for the sake of getting some experience with QEMU/KVM on Linux. Note that this won\u2019t be a full guide to the process, but more of a showcase on how I set it up for myself."),Dt.forEach(t),g=n(e),E=a(e,"BR",{}),R=n(e),U=a(e,"P",{});var yt=h(U);q=p(yt,"Feel free to use anything mentioned here for yourself and be sure to follow along with the files mentioned by viewing them yourself on my "),V=a(yt,"A",{href:!0,rel:!0});var Ot=h(V);Q=p(Ot,"github"),Ot.forEach(t),F=p(yt,". Without further rambling, let\u2019s get into the important parts."),yt.forEach(t),B=n(e),z=a(e,"BR",{}),W=n(e),T=a(e,"H2",{});var jt=h(T);H=p(jt,"Hardware & Specifics"),jt.forEach(t),A=n(e),X=a(e,"BR",{}),G=n(e),y=a(e,"P",{});var C=h(y);L=a(C,"STRONG",{});var Kt=h(L);I=p(Kt,"CPU:"),Kt.forEach(t),w=p(C," AMD Ryzen 7 3700x "),_=a(C,"BR",{}),k=n(C),D=a(C,"STRONG",{});var qt=h(D);Y=p(qt,"RAM:"),qt.forEach(t),Z=p(C," 16GB DDR4 3600MHz "),$=a(C,"BR",{}),ee=n(C),S=a(C,"STRONG",{});var Qt=h(S);te=p(Qt,"GPU:"),Qt.forEach(t),oe=p(C," EVGA RTX 2080 XC Gaming "),vt=a(C,"BR",{}),C.forEach(t),Pe=n(e),ke=a(e,"BR",{}),Me=n(e),ie=a(e,"P",{});var Ft=h(ie);bt=p(Ft,"While most hardware choices don\u2019t really matter for this kind of virtualization, eg. get as much memory as you can, have a processor with a lot of threads; one recommendation I can make is to not get an Nvidia GPU. Not only is this good advice for anyone looking to transition to a Linux desktop due to proprietary drivers and other headaches, but it plays a large part in the complexity of this setup as I painfully learned trying to figure out why the VM wouldn\u2019t start when I first set it up, more on this later."),Ft.forEach(t),xe=n(e),Ve=a(e,"BR",{}),Ee=n(e),se=a(e,"P",{});var Jt=h(se);_t=p(Jt,"Other than that, my experience was pretty standard. Setting up a VM through virt-manager and libvirt was the same process as any other type of VM. I installed Windows normally using the default video drivers provided by QEMU and virtio drivers for disks, network, etc, before doing anything GPU related to make sure any errors I had to solve later weren\u2019t related to the VM itself."),Jt.forEach(t),Ue=n(e),Ce=a(e,"BR",{}),Be=n(e),le=a(e,"H2",{});var Yt=h(le);gt=p(Yt,"GPU Passthrough"),Yt.forEach(t),Ge=n(e),Re=a(e,"BR",{}),Te=n(e),O=a(e,"DIV",{style:!0});var Zt=h(O);ve=a(Zt,"P",{});var $t=h(ve);ae=a($t,"IMG",{src:!0,alt:!0}),$t.forEach(t),Zt.forEach(t),He=n(e),re=a(e,"P",{});var eo=h(re);It=p(eo,"Above is my edited vBios file that is passed through to the VM. Usually, when you load into a graphical session, the vBios gets changed as you use the GPU. Because of this, a new vBios is given to the VM to use. Next, to add the GPU alongside any other devices such as a USB controller, I had to get the relevant IOMMU groups. \\ Here\u2019s an example of what the GPU group looked like on my system:"),eo.forEach(t),Ne=n(e),We=a(e,"BR",{}),Ae=n(e),ne=a(e,"P",{});var to=h(ne);Pt=p(to,"These were added to the xml file containing all the information for the VM."),to.forEach(t),Le=n(e),Se=a(e,"BR",{}),ze=n(e),fe=a(e,"P",{});var oo=h(fe);kt=p(oo,"Now that the normal setup is done, we can move on to specifics in a single GPU setup. The idea is for this process is generally as follows:"),oo.forEach(t),Xe=n(e),De=a(e,"BR",{}),Oe=n(e),N=a(e,"OL",{});var we=h(N);be=a(we,"LI",{});var io=h(be);Mt=p(io,"Stop the host display server"),io.forEach(t),xt=n(we),_e=a(we,"LI",{});var so=h(_e);Vt=p(so,"Unload all GPU drivers"),so.forEach(t),Et=n(we),ge=a(we,"LI",{});var lo=h(ge);Ut=p(lo,"Load the vfio kernel modules in their place"),lo.forEach(t),we.forEach(t),je=n(e),Ke=a(e,"BR",{}),qe=n(e),he=a(e,"P",{});var ao=h(he);Ct=p(ao,"This is accomplished with scripts that are triggered by the VM starting and stopping. Naturally, start.sh handles startup, with the IOMMU groups sourced from kvm.conf. Lucky for me, you only need to edit the vBios file on Nvidia GPUs. Most documention said this was only required for pascal series (eg. GTX 1070), however, I was unable to get the VM to properly boot without this step. Keep that in mind if you plan on having a similar setup."),ao.forEach(t),Qe=n(e),Fe=a(e,"BR",{}),Je=n(e),ue=a(e,"H2",{});var ro=h(ue);Bt=p(ro,"Optimization"),ro.forEach(t),Ye=n(e),Ze=a(e,"BR",{}),$e=n(e),j=a(e,"P",{});var ct=h(j);Gt=p(ct,"Now that I had a working VM, the next goal was to reduce any latency and overhead from virtualising Windows. Since I planned to play some competitive games that don\u2019t run on linux, it was important to me to make it feel like I was playing on bare metal. The main things I used for this were CPU Pinning and HugePages "),J=a(ct,"A",{href:!0,rel:!0});var no=h(J);Rt=p(no,"(Arch Wiki)"),no.forEach(t),Tt=p(ct,". CPU pinning manually allocates certain threads to the VM so the host doesn\u2019t use them as well, introducing latency. This is configured on a per-CPU basis since every processor has it\u2019s own architechture. In my case, the Ryzen 7 3700x has the following layout:"),ct.forEach(t),et=n(e),tt=a(e,"BR",{}),ot=n(e),K=a(e,"DIV",{style:!0});var fo=h(K);Ie=a(fo,"P",{});var ho=h(Ie);pe=a(ho,"IMG",{src:!0,alt:!0}),ho.forEach(t),fo.forEach(t),it=n(e),st=a(e,"BR",{}),lt=n(e),me=a(e,"P",{});var uo=h(me);Ht=p(uo,"The important sections to look at are the grey boxes which represent a physical core, and the group of grey boxes itself which represents a CCX (Core Complex). I chose to only include cores from one of the two CCX present on the CPU. Since the VM will only be used for gaming and schoolwork, 8 threads should be more than enough performance. Using only one CCX will also improve latency since the cores won\u2019t have to wait on information from the other CCX. Lastly, I chose the second or bottom CCX since I want to leave Core #0 for the host. All of this can be seen in the xml file, specifically in the \u201Ccputune\u201D section."),uo.forEach(t),at=n(e),rt=a(e,"BR",{}),nt=n(e),de=a(e,"P",{});var po=h(de);Nt=p(po,"The last major optimization I included was HugePages. Without going into too much detail, it is an alternate way of providing memory to the VM, which results in a massive difference in performance according to my testing. It is manually allocated using the scripts triggered at startup and deallocated upon closing the VM. I stronly recommend looking into HugePages if you decide to use a setup like this. There were a few other small optimizations that I applied and you might be able to find in the xml file, but they didn\u2019t provide enough of a difference to be meaningful in my opinion."),po.forEach(t),ft=n(e),ht=a(e,"BR",{}),ut=n(e),ye=a(e,"H2",{});var mo=h(ye);Wt=p(mo,"Hyper-V"),mo.forEach(t),pt=n(e),mt=a(e,"BR",{}),dt=n(e),ce=a(e,"P",{});var yo=h(ce);At=p(yo,"Hyper-V is a virtualization platform on Windows, and it\u2019s normally used in this case to hide the nature of the host to the guest machine. In other words, you can use it to hide the fact that you are using a VM to circumvent some anti-cheats and other software restrictions. I chose not to use it in my setup due to the performance hit as well as not really needing it for anything I use Windows for. Note that games like Valorant have been updated to automatically flag Hyper-V users, but it can work for other titles with a similar anti-cheat."),yo.forEach(t),this.h()},h(){M(V,"href","https://github.com/kleidibujari/virt-machine"),M(V,"rel","nofollow"),vo(ae.src,zt="/blog/windows-vm-passthrough/gpu-hex.png")||M(ae,"src",zt),M(ae,"alt","vbios hex dump"),wt(O,"display","flex"),wt(O,"justify-content","center"),M(J,"href","https://wiki.archlinux.org/title/KVM#Enabling_huge_pages"),M(J,"rel","nofollow"),vo(pe.src,Xt="/blog/windows-vm-passthrough/lstopo.png")||M(pe,"src",Xt),M(pe,"alt","vbios hex dump"),wt(K,"display","flex"),wt(K,"justify-content","center")},m(e,o){i(e,f,o),s(f,m),i(e,b,o),i(e,P,o),i(e,d,o),i(e,c,o),s(c,x),i(e,g,o),i(e,E,o),i(e,R,o),i(e,U,o),s(U,q),s(U,V),s(V,Q),s(U,F),i(e,B,o),i(e,z,o),i(e,W,o),i(e,T,o),s(T,H),i(e,A,o),i(e,X,o),i(e,G,o),i(e,y,o),s(y,L),s(L,I),s(y,w),s(y,_),s(y,k),s(y,D),s(D,Y),s(y,Z),s(y,$),s(y,ee),s(y,S),s(S,te),s(y,oe),s(y,vt),i(e,Pe,o),i(e,ke,o),i(e,Me,o),i(e,ie,o),s(ie,bt),i(e,xe,o),i(e,Ve,o),i(e,Ee,o),i(e,se,o),s(se,_t),i(e,Ue,o),i(e,Ce,o),i(e,Be,o),i(e,le,o),s(le,gt),i(e,Ge,o),i(e,Re,o),i(e,Te,o),i(e,O,o),s(O,ve),s(ve,ae),i(e,He,o),i(e,re,o),s(re,It),i(e,Ne,o),i(e,We,o),i(e,Ae,o),i(e,ne,o),s(ne,Pt),i(e,Le,o),i(e,Se,o),i(e,ze,o),i(e,fe,o),s(fe,kt),i(e,Xe,o),i(e,De,o),i(e,Oe,o),i(e,N,o),s(N,be),s(be,Mt),s(N,xt),s(N,_e),s(_e,Vt),s(N,Et),s(N,ge),s(ge,Ut),i(e,je,o),i(e,Ke,o),i(e,qe,o),i(e,he,o),s(he,Ct),i(e,Qe,o),i(e,Fe,o),i(e,Je,o),i(e,ue,o),s(ue,Bt),i(e,Ye,o),i(e,Ze,o),i(e,$e,o),i(e,j,o),s(j,Gt),s(j,J),s(J,Rt),s(j,Tt),i(e,et,o),i(e,tt,o),i(e,ot,o),i(e,K,o),s(K,Ie),s(Ie,pe),i(e,it,o),i(e,st,o),i(e,lt,o),i(e,me,o),s(me,Ht),i(e,at,o),i(e,rt,o),i(e,nt,o),i(e,de,o),s(de,Nt),i(e,ft,o),i(e,ht,o),i(e,ut,o),i(e,ye,o),s(ye,Wt),i(e,pt,o),i(e,mt,o),i(e,dt,o),i(e,ce,o),s(ce,At)},p:To,d(e){e&&t(f),e&&t(b),e&&t(P),e&&t(d),e&&t(c),e&&t(g),e&&t(E),e&&t(R),e&&t(U),e&&t(B),e&&t(z),e&&t(W),e&&t(T),e&&t(A),e&&t(X),e&&t(G),e&&t(y),e&&t(Pe),e&&t(ke),e&&t(Me),e&&t(ie),e&&t(xe),e&&t(Ve),e&&t(Ee),e&&t(se),e&&t(Ue),e&&t(Ce),e&&t(Be),e&&t(le),e&&t(Ge),e&&t(Re),e&&t(Te),e&&t(O),e&&t(He),e&&t(re),e&&t(Ne),e&&t(We),e&&t(Ae),e&&t(ne),e&&t(Le),e&&t(Se),e&&t(ze),e&&t(fe),e&&t(Xe),e&&t(De),e&&t(Oe),e&&t(N),e&&t(je),e&&t(Ke),e&&t(qe),e&&t(he),e&&t(Qe),e&&t(Fe),e&&t(Je),e&&t(ue),e&&t(Ye),e&&t(Ze),e&&t($e),e&&t(j),e&&t(et),e&&t(tt),e&&t(ot),e&&t(K),e&&t(it),e&&t(st),e&&t(lt),e&&t(me),e&&t(at),e&&t(rt),e&&t(nt),e&&t(de),e&&t(ft),e&&t(ht),e&&t(ut),e&&t(ye),e&&t(pt),e&&t(mt),e&&t(dt),e&&t(ce)}}}function Lo(v){let f,m;const b=[v[0],bo];let P={$$slots:{default:[Ao]},$$scope:{ctx:v}};for(let d=0;d<b.length;d+=1)P=St(P,b[d]);return f=new Wo({props:P}),{c(){Uo(f.$$.fragment)},l(d){Co(f.$$.fragment,d)},m(d,c){Bo(f,d,c),m=!0},p(d,[c]){const x=c&1?Go(b,[c&1&&co(d[0]),c&0&&co(bo)]):{};c&2&&(x.$$scope={dirty:c,ctx:d}),f.$set(x)},i(d){m||(Po(f.$$.fragment,d),m=!0)},o(d){ko(f.$$.fragment,d),m=!1},d(d){Ro(f,d)}}}const bo={title:"Making a High performance Win10 VM with GPU-Passthrough",date:"2022-01-15",length:"Medium"};function So(v,f,m){return v.$$set=b=>{m(0,f=St(St({},f),wo(b)))},f=wo(f),[f]}class Xo extends _o{constructor(f){super(),go(this,f,So,Lo,Io,{})}}export{Xo as default,bo as metadata};
